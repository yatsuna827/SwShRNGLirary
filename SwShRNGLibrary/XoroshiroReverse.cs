using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SwShRNGLibrary
{
    public static class XoroshiroReverse
    {
        private static readonly (ulong s0, ulong s1)[] matrix = new (ulong s0, ulong s1)[128]
        {
            (0xD8CB345740F9BA96,0xFDBEDC250235CA33),
            (0x913D815E0064F882,0xB6B9E27E28E4A2C1),
            (0x31B9BE74D34C39BB,0xF6DF7010FFD0EEA1),
            (0xB183EDFC498E255B,0x7336724BFD12B618),
            (0x5461A3F3BC19D387,0x9B45DED9BF145FC7),
            (0xFDECA5AD78245215,0x64033FF49253C65D),
            (0x00E51DE5C6A2F5C9,0x1F079FF7D9DD7D25),
            (0x3EE019887E001F91,0x0F9F42C404F2509A),
            (0x172370DF0B92880F,0x3B550DC415EA8F03),
            (0x32B52E823CA3E18A,0x9DA3B4DA43C95D3F),
            (0x9BCEB37B087E737D,0x4BD61B01154B2B99),
            (0xD9841BF4E7590AEB,0x335BEE226394B14E),
            (0x787BD8281C37D01C,0xEC0D4A72D52D83C7),
            (0xCA56A0F331E95E32,0xB7008E864C11523D),
            (0xC3A80824CFEC16EF,0x97CCED3A112B92F7),
            (0x37C9C7F9C20BD5A3,0x7FE4AFA0A243DB42),
            (0x0787144063C4E56A,0x818EC1C1C9C83421),
            (0x7EB440562794F77D,0xB81557DC42FA4E94),
            (0xD8B53CA7EC3A6A22,0x032A65A66240057C),
            (0xB320D5116681FE11,0x172229303CEC2398),
            (0xDB42F8DF45C4F18D,0xCED410164224E26D),
            (0xE868420C8727A8A8,0xAE6CD25C70C35AA0),
            (0x5C25D9DDAABCF72D,0xC76AA7EFB11F232A),
            (0x6DBB0B456344CBB8,0xCDD6BEE14AB1DBED),
            (0xB07F1982456DBF00,0xF01C40E9DE40AF5E),
            (0xE04D8494C2EBD061,0xF9DFE3608E390D7C),
            (0xF31CCDD0663A10F9,0xA0B2D32BD0866A0D),
            (0xED68DA45EA97E0F4,0x1102A5613D64E2B4),
            (0xEE93D49DEA938E3F,0xCE3A63606E5F9680),
            (0xE70722DE4FF3E4DA,0xDF02F45956ED70AB),
            (0x92B4CE9449E0B3F0,0x45923A161F5A32AB),
            (0xBFAA7B30E072451A,0x8F7FEC78AAEFFA7B),
            (0xBFFEC08F2FFC4394,0xC02A74D7A75D4411),
            (0x00A4A26FB47D5CD9,0xF7EFCF7B86DE880D),
            (0x61E951FA77EEA266,0x2EC57504A6EADF7A),
            (0x5B48BFBC347BE15A,0xE1528C9734D8436A),
            (0x575B66FBB092C020,0x8045CC1E050DDEF2),
            (0x55474C2C66924C4D,0x3284AF938E333ACD),
            (0x2D5722C3D37E6556,0x081DC16A5E588048),
            (0xDB1E308234C9B540,0xCF922710084495B6),
            (0xB19668AE81F3752D,0xFB7DB84A046B9466),
            (0x7599797096FA0B02,0x5A9A096B86A6BC7B),
            (0x2703968A204D6CE1,0x9E36E35275BCEBE6),
            (0x4892A3AD2075889C,0xAB5B55C0CC97D008),
            (0x0B8AA80F9251434D,0x2D3D462DB3155C63),
            (0xD571214703FB07A7,0x520ED4BB6B85A69D),
            (0xB7F304F1353D058B,0x23E94DDACF001581),
            (0xE936D7E0A5A9D57F,0x5E80ADDB28A00042),
            (0xD684F774E5624F80,0xC1BF97CACB4C5C1E),
            (0x057B2A896CF9E131,0xA9D7346960DC89A9),
            (0x46FCB052526D519E,0xC8CE3207849311CC),
            (0x69D581A220AD4037,0xD715CD1DBC366589),
            (0xF41F4AA1DF89ED60,0xCF3CCDC399D3833B),
            (0x4CDD09D92F236B9E,0xBEA92C8C4C30337B),
            (0x96E83C45CC39B56B,0xDC55260CAAD1C9DE),
            (0xC077F82C96055169,0xEF4F8FFAF1F96ABC),
            (0xC140C1B27781E2BD,0x5FE7DF3F8A8C5794),
            (0xF4CED48370F77B65,0x307C938756200C28),
            (0xF92B7953F65117FB,0xFFC2EC195D6E4AE9),
            (0xFD0BF85E53541AA0,0x83579840F833F6A5),
            (0x66413B191FF9938D,0x7DA4548588D664C5),
            (0x4BE79A8367A37839,0x265C71D870E0820D),
            (0x91D69F4034EBE5BE,0x0380B21E2D3C174C),
            (0x375B93BA9220BB50,0xC5DE1DCE9C3D4867),
            (0xD8C3B6D911C2F943,0xF4E5535355AF6A32),
            (0xC6D7781CC76C4150,0x880BA09FA811FB39),
            (0x75C954175599262D,0x8557736375CDD805),
            (0x9A1E1727ABDCA4A4,0x375A4C6A9C3AAA21),
            (0xF7284C1B567B37C5,0x80F325477229BC2A),
            (0xD34C4D3EDAACB24D,0xF7501BD08AEB4C7B),
            (0xB6DC22DF7EDA1BD0,0x02E1EDC2A56792EE),
            (0xAA16FD7827A9F5CC,0x4E216A9725B6F1EC),
            (0xEFE16615F9D5D791,0x8C408186F573CD1B),
            (0x52A4590F291DC3AE,0x0F33E907A4876EE8),
            (0xEAA7E7511BD487CC,0x1DEF9072ECD4CD66),
            (0x03512F31587D1CDF,0x8BA2700D4F11165A),
            (0x7C9322D9FBD19D45,0xFB2B1354E6A50772),
            (0x122E6A422C23CA1C,0x6EF33070CF99653D),
            (0xD218A6A6CD36CD8E,0x6D5B9E34CE37DEC6),
            (0x982DB026D0192F8C,0x6F627F1B173D077A),
            (0xC9C17FFC82F78ED7,0xD42F120B874EABF6),
            (0x20F8ED3BDF42DB31,0xC6F1290211DB866C),
            (0xD48C545615F1F5DE,0x806FCEF62629D3C8),
            (0x03FFFF384BBFDAB9,0xF70652478BB52E35),
            (0xA8C75F1E6AED268C,0x3C351057D41C019E),
            (0x5DF7368B1D78224D,0x4EE1AC6EAE8747CA),
            (0xC381CA1C735612D1,0x57D9281B82A79DF9),
            (0x15606A856E440DC4,0xD21BF6BE62AB8526),
            (0xF0808A952C3367DC,0x53D41E2BD7F7D9C8),
            (0xD1F2F9E003DDE9D1,0x271215740A7B2693),
            (0x55FD3EA03B93BFD5,0x486A0169205F1648),
            (0x5CE73579982951A6,0xF1938CB1C1A096D1),
            (0x6335A62A35704F4B,0xD776AD2969E6C0F3),
            (0x0C958AF0E4C1A881,0xD5AC129FBD76C0A1),
            (0xA68062554F62B96D,0x227D2DB570B5C6E8),
            (0x51F261881DBF6944,0x87C229801926222E),
            (0x196ED87CCB9E64DA,0x27D1CC00E5117CE6),
            (0x6D14655F18F228AC,0xFB779B889B8B0DD0),
            (0x35CC298469860A2B,0xBBDC2F5CBA1D9CA3),
            (0x8482F11996EB0DAC,0xF08800EC89A5795D),
            (0xF213D4E5E2A9477C,0x9E221E114C030322),
            (0x8000000000000000,0x0000000000000000),
            (0x2BF57CA163845CE9,0x1F592170C07AACFC),
            (0x22387531C36A8FCB,0x39C401B9C50E9B52),
            (0x95CABC2AD9B4E115,0x269BD8AB9B595E1C),
            (0xD1A0B6B35DACD3CB,0x8976BA744D53A1F6),
            (0x17507449D144702C,0x49A992120C5C4513),
            (0xDB18DEDA74A1D6E6,0x0A5EFEA1959027E5),
            (0x4A7B72782CD4F52E,0xA0DF142990A250BB),
            (0x7C610B657923AFCF,0x5B8AC621704CA10C),
            (0xB00CFA81A242B0F8,0xCDE5E955D86A49EB),
            (0xB8B0EB522148DBB2,0x2FB10202D702A37F),
            (0x6D6A9A62DF920B1A,0x5C7CCF179642D38A),
            (0x82703C3FDB6E8746,0x0F3EEB283209125A),
            (0x6C3C65588EE54A17,0x6CF9DF7B41C41B80),
            (0x88DC160629F0CC5A,0x79E67E3C44437618),
            (0x57F23BEF89097D17,0x8843685DDABF6E1C),
            (0xE727749958041434,0x2E7D2E5E0C8E1FEB),
            (0x2F2656B6FC6B1626,0x3F723F6F2990E47C),
            (0x061CB478FCE5CFFE,0x41A2D5A82234EB5A),
            (0xD86BD453BE02B3BE,0xF4BFFA00F061D6D6),
            (0xB9C692A7BF094A6A,0x7DDD479BE0D121F9),
            (0x5ACFBA43CD2FC572,0xF046BF196F220EB5),
            (0xCFD648A7C468D314,0xCCF4004132110F69),
            (0xBC69F1A72E1DC2D4,0x8B4B6394BFC07F65),
            (0x207FC98BB4AF6C6E,0x51E42F6104DBBB4B),
            (0x98DBFFFD4806BD32,0xEBCB3CB169EC45F7),
            (0xD374B8FF0649767C,0xF0C1AE9A53A1EE22),
        };

        private static (ulong s0, ulong s1) Products(this (ulong s0, ulong s1) state, (ulong s0, ulong s1)[] matrix)
        {
            var result = (0UL, 0UL);
            for (int i = 0; i < 64; i++)
            {
                var (s0, s1) = matrix[i];
                // 論理積を取り、立っているビットの偶奇を見ることで畳み込み計算ができる。
                // convolution; 畳み込み
                var conv = (ulong)((s0 & state.s0).PopCount() + (s1 & state.s1).PopCount()) & 1;
                result.Item1 |= (conv << i);
            }
            for (int i = 0; i < 64; i++)
            {
                var (s0, s1) = matrix[i + 64];
                var conv = (ulong)((s0 & state.s0).PopCount() + (s1 & state.s1).PopCount()) & 1;
                result.Item2 |= (conv << i);
            }

            return result;
        }
        private static int PopCount(this ulong x)
        {
            x = (x & 0x5555555555555555UL) + ((x & 0xAAAAAAAAAAAAAAAAUL) >> 1);
            x = (x & 0x3333333333333333UL) + ((x & 0xCCCCCCCCCCCCCCCCUL) >> 2);
            x = (x & 0x0F0F0F0F0F0F0F0FUL) + ((x & 0xF0F0F0F0F0F0F0F0UL) >> 4);

            x += x >> 8;
            x += x >> 16; 
            x += x >> 32;
            return (int)(x & 0x7F);
        }

        /// <summary>
        /// 観測された乱数値の最下位bit列から現在の状態を算出します。
        /// bit列はbits1の下位bitから順に並べてください。
        /// </summary>
        /// <param name="bits1"></param>
        /// <param name="bits2"></param>
        /// <returns></returns>
        public static (ulong s0, ulong s1) ReverseStateByLSB(ulong bits1, ulong bits2)
            => (bits1, bits2).Products(matrix);
        public static (ulong s0, ulong s1) ReverseStateByLSB((ulong bits1, ulong bits2) bits)
            => bits.Products(matrix);
    }
}
