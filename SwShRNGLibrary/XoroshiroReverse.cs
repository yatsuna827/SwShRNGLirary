using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SwShRNGLibrary
{
    public static class XoroshiroReverse
    {
        private static readonly (ulong s0, ulong s1)[] matrix = new (ulong s0, ulong s1)[128]
        {
            (0x919279AFA0043585, 0x2AC7C1FD1EF73D77),
            (0xF6A68B38CFEFBED5, 0xA108E2438E814027),
            (0x1B1EC9627E759E80, 0xBC937730EE10968D),
            (0xCE150A42D536FFE3, 0x8CCB4A243F2E041F),
            (0x56DEBCBDF59C1ED6, 0xAE05441ED2680E32),
            (0x4A4067400259E38F, 0xE1B2A1FA5C07D3E7),
            (0x07DA40BDCAB71873, 0xB032597BC32CA82E),
            (0x9FFC63F3D1C24CBE, 0xD2722AC92E19FF88),
            (0xCAF515DEE8E0F36D, 0xCC2A248C5E4BE94C),
            (0x47A99BE37274A5DE, 0x613E6A6676FB932B),
            (0x8031B1DE92EF6197, 0xE9C24B384B484FFB),
            (0xD1928C0AD82C3402, 0x03476D269FFCC25B),
            (0xD3AA14D69614E9A1, 0x1D075F47D58C542F),
            (0xEA033EC05CD59CFB, 0x49DFCBC3E2276D3E),
            (0x11CF3920D5943479, 0x43654C6FE539EE56),
            (0xA539A68278F047CC, 0xAAE9E67CC2443573),
            (0x9A1C73FD90F2DC66, 0x2D6CF2084930B700),
            (0x70C57A872439938F, 0xEED27A67A922E7E6),
            (0xF4173191FF98EA3B, 0xD6C19DC854874190),
            (0xEF5FFF150DCCAF2D, 0x36DEA6B51974D01F),
            (0xC34D9526CE3CCEB6, 0x6860683209F897AF),
            (0x99300C1C5D79317B, 0xCF5D9540F6B5A917),
            (0x0573FF9E392F6DF5, 0xE441ACFA5F2DAE27),
            (0x4DFD3096CF4E1AB2, 0xECD867F371B128E5),
            (0xFF1998403621C0B3, 0x81A01BA27F23DD7D),
            (0x353DB70D80E290BC, 0x04F93BA4D566F1D4),
            (0xD2F19565722A66C8, 0xE338700148ABF37C),
            (0xB85F7C98537CCADA, 0x6C20D96D4BD4636E),
            (0xEC19735241E7FFF3, 0xD19B269297F6FF4A),
            (0x761C375BA2B78A99, 0x6B7C5389ADA2B9E3),
            (0x1409D2408BD25F05, 0x5CD8501283C6FD6A),
            (0xBE6881B1C4BC2911, 0x4BA1FE1300B6036A),
            (0x0EF6338CBBDA0902, 0x97874B08691C1FCA),
            (0x6DDE9E1A73FC242E, 0xF0653753F73C88B3),
            (0x95A912429EF4513F, 0x80B2C2DABE348902),
            (0xE0D2F40176E4F914, 0x42129353E08D6142),
            (0x1E07776A260C398C, 0x3F0936C513E99A11),
            (0x149B7B916FBBA7D7, 0x27F0F4977FF866FC),
            (0x49B670159EE8BE15, 0x3B8B79B3694E9E6E),
            (0x75DA6A24BBFF7378, 0x03E7C0FCD3369F35),
            (0xBBED0586B796FE8E, 0x7F40C0897222044D),
            (0x8818700AB15678DC, 0x6A7574F39BADA05E),
            (0x7488E369EA7384A5, 0x7516312C43F8DD98),
            (0x71A8CC325881B2E7, 0x9833FEDF1DC8568A),
            (0x13F40105298A120C, 0xC84BA4F679E16590),
            (0x704CDC2AAC76C0AF, 0x445736AB8B6548A7),
            (0xC320F4C9ACAD00E8, 0x5D42F67A1E9A8FA0),
            (0xB2A1EC1446ABA6B1, 0xE0069FA86EEA4175),
            (0xDE0CB4048774FB5D, 0x5DA8F83E1A266073),
            (0xA4478442BC59D92A, 0xF0EB30D022F73E26),
            (0xA1DB5AD0015C2432, 0xA301B416C8711EE5),
            (0x0F39F58B6CA24251, 0x521527AF3509C1DF),
            (0x1CE8B7DF37820536, 0x25F416C6E4B71F3F),
            (0xDAC59473D7E86102, 0xC5AB4606D3D3723D),
            (0x59CF2D7B96BBEB0D, 0x958525FB15D0BCA8),
            (0x639D35883FA913EB, 0x64734C2E4602B848),
            (0x3D1C19AAE4B9E45E, 0x5E2A3B277C497B19),
            (0x9CE04051BAABDF12, 0x6E0D7E8A59C0059F),
            (0x36050939804108DE, 0x6424EEAA9A002A2F),
            (0x3AC1C7C05894E886, 0x78CEC0BB0D228D66),
            (0x0757778986D5E6E4, 0x80CF50191E5363C5),
            (0x4D66438D05E15B07, 0x2D20281D1BC8442D),
            (0xBFCC90ADAA749F19, 0x6E6F83F93B255F5E),
            (0x88032D5C6FC3D43F, 0x358F8C4481D52229),
            (0x095B8F76579AA001, 0x0008828E513B43D5),
            (0x9AA86235B6FC1BA2, 0x8964D0B9591523E3),
            (0x50F037B93F778724, 0xB0AB2AF320F225DA),
            (0x2ACC5D83704012C3, 0x0D66A23D0D81197F),
            (0xE1CC4BB560B49177, 0x3A4CEA5B5E623413),
            (0xA7D7FA9CFD06443F, 0x6688562B3E567F5B),
            (0xC215BA79A4EE887C, 0x8D1C9F780AD43407),
            (0x1BFEC7766377D372, 0x9698627D4DFB0239),
            (0x88480511E9CF4EEB, 0x09DE1724A9C11873),
            (0x6CBD28672AC43748, 0x53A98E7AB9FB8B5B),
            (0x28D207C5E1F7268A, 0x994FEBD044928D3C),
            (0x7D8E619404D61E57, 0x57DC90C4950C8733),
            (0x68168AA48DBF3FD5, 0x02FDF70E9A23E34F),
            (0xE4C0D7333296C40F, 0x1FCB1A42F5BAC57E),
            (0x6B9E661AE807B786, 0x502AF14B3A9A8E52),
            (0x858C5178E1237BBE, 0x9B41E42551F5A409),
            (0x0BF17B75A2301570, 0x03506E4CE8D4DCBA),
            (0x68FAA9A3F8686EF5, 0x751F405624080DA4),
            (0x68892A2696708F36, 0x135697BFF850181C),
            (0xEFF8913EEBB7F4D1, 0xA200C37D1410E026),
            (0xF5933FEA41B83A9F, 0xAC26460A8850E114),
            (0x02FA45034AAF0F3B, 0xFBF4E283337C507C),
            (0x7CCCE5BDD8C61908, 0x7F8B327A429072CB),
            (0xD35D5714DB3EC424, 0x4405EE6B21DFE562),
            (0xDB5E4ED6ACD369D7, 0x6DDB5C3D3922E81B),
            (0x82F4E1AA16789D87, 0x9E944AB23E2A4A2B),
            (0xCDB44FA0CC89D2C4, 0xE95EC555690D021A),
            (0xAAE86274FC498AD8, 0x6C31DC71E9A2E4C4),
            (0xD012384F7B8568B6, 0xC35A056E74E7FB58),
            (0xDEA7D75F8BC224D0, 0x0A2284E1BD7DB182),
            (0x419169466B527A83, 0x4615146898C4CF94),
            (0x7DF016DB05D50BFF, 0x3F382AA5BC726B4D),
            (0x4159C6B541D6817C, 0x5A97E75E15B0E17D),
            (0xE0AE659F6DBB94D7, 0xEA548B2DB3AFA369),
            (0xAB0F13D80F8157DA, 0xAD8A84AE74F9CEA5),
            (0xF042FE22A57A64C2, 0x51AEBD1AB30F51A5),
            (0xC77D27A47384571C, 0x985A2A30601E8CA7),
            (0x4C64FB6CFBCF4AC2, 0x1567A1B9A7E63F51),
            (0xB2AAB33D974482BB, 0x9432583A43579008),
            (0xA5F77F6DA0810CD2, 0x061C2EE1E77159AB),
            (0x726CABE0D2BB7690, 0x40D6F40C99578EB0),
            (0x5F24BC3F615917D0, 0xCA209665EE98BCFA),
            (0x76CBCEEE7FAFD3D8, 0x439D7BE8B128D65E),
            (0x664A3AD91CE19807, 0x9E932246CC61EFFE),
            (0xC2015242D95ACFE6, 0x2275245A31F17ED8),
            (0xA15E88678097DEC3, 0x62FA19D47BC5789F),
            (0x158A59C22C58494B, 0x194BF20E67800C38),
            (0x50DC1CB69241738E, 0xB84291332F70C089),
            (0xD2A3B17445B0452A, 0xAA49BFB62DE5835E),
            (0x5DDE4F390DD5EB3A, 0x0FFD5424A7D7DBB0),
            (0x0761F4F9B721AC7A, 0x2B0A68C08BCED420),
            (0xB9856826350491FF, 0x89A39FD5474C11E8),
            (0x105AFBFD4CE99E39, 0x18D4012CC9D8C8BD),
            (0x48F684441961648B, 0x171E4E2250F235DD),
            (0x0C1FE9926E28FEBD, 0x4DE69D18C6957521),
            (0xCAE2CA609F396286, 0xE2CFC47CFEF60D2C),
            (0x8053B715F33DADFE, 0x4A6F32E406B2181C),
            (0x1FC292DD6C0F2A14, 0xE227565B68499AB7),
            (0xCDE5248F8BEB1F20, 0x1A54BBE1E2E4FCB5),
            (0xB8724AAADB39EA7E, 0xCDE10E0726434F9C),
            (0xCF5033C10A386F4B, 0x546EC4CC283766C3),
            (0x1223EB4B4D7954B2, 0x763DA3CFA3009AB3),
            (0x5F496CE8E080569D, 0xCD32F9CC5D3BFC15),
            (0x0FA2ED62DF51DA06, 0x05335AAA10D378B3),
        };

        private static (ulong s0, ulong s1) Products(this (ulong s0, ulong s1) state, (ulong s0, ulong s1)[] matrix)
        {
            var result = (0UL, 0UL);
            for (int i = 0; i < 64; i++)
            {
                var (s0, s1) = matrix[i];
                // 論理積を取り、立っているビットの偶奇を見ることで畳み込み計算ができる。
                // convolution; 畳み込み
                var conv = (ulong)((s0 & state.s0).PopCount() + (s1 & state.s1).PopCount()) & 1;
                result.Item1 |= (conv << i);
            }
            for (int i = 0; i < 64; i++)
            {
                var (s0, s1) = matrix[i + 64];
                var conv = (ulong)((s0 & state.s0).PopCount() + (s1 & state.s1).PopCount()) & 1;
                result.Item2 |= (conv << i);
            }

            return result;
        }
        private static int PopCount(this ulong x)
        {
            x = (x & 0x5555555555555555UL) + ((x & 0xAAAAAAAAAAAAAAAAUL) >> 1);
            x = (x & 0x3333333333333333UL) + ((x & 0xCCCCCCCCCCCCCCCCUL) >> 2);
            x = (x & 0x0F0F0F0F0F0F0F0FUL) + ((x & 0xF0F0F0F0F0F0F0F0UL) >> 4);

            x += x >> 8;
            x += x >> 16; 
            x += x >> 32;
            return (int)(x & 0x7F);
        }

        /// <summary>
        /// 観測された乱数値の最下位bit列から現在の状態を算出します。
        /// bit列はbits1の下位bitから順に並べてください。
        /// </summary>
        /// <param name="bits1"></param>
        /// <param name="bits2"></param>
        /// <returns></returns>
        public static (ulong s0, ulong s1) ReverseStateByLSB(ulong bits1, ulong bits2)
            => (bits1, bits2).Products(matrix);
    }
}
